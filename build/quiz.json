[
    {
        "id": "01",
        "question": "Which of the following is the correct name of React.js?",
        "options": [
            "React",
            "React.js",
            "ReactJS",
            "All of the above"
        ],
        "answer": "All of the above"
    },
    {
        "id": "02",
        "question": "Which of the following are the advantages of React.js?",
        "options": [
            "React.js can increase the application's performance with Virtual DOM.",
            "React.js is easy to integrate with other frameworks such as Angular, BackboneJS since it is only a view library.",
            "React.js can render both on client and server side.",
            "All of the above"
        ],
        "answer": "All of the above"
    },
    {
        "id": "03",
        "question": "Which of the following is not a disadvantage of React.js?",
        "options": [
            "React.js has only a view layer. We have put your code for Ajax requests, events and so on.",
            "The library of React.js is pretty large.",
            "The JSX in React.js makes code easy to read and write.",
            "The learning curve can be steep in React.js."
        ],
        "answer": "The JSX in React.js makes code easy to read and write."
    },
    {
        "id": "04",
        "question": "Which of the following command is used to install create-react-app?",
        "options": [
            "npm install -g create-react-app",
            "npx create-react-app my-app",
            "npm install create-react-app",
            "npm install -f create-react-app"
        ],
        "answer": "npx create-react-app my-app"
    },
    {
        "id": "05",
        "question": "What of the following is used in React.js to increase performance?",
        "options": [
            "Original DOM",
            "Virtual DOM",
            "Both A and B.",
            "None of the above."
        ],
        "answer": "Virtual DOM"
    },
    {
        "id": "06",
        "question": "What is the default port where webpack-server runs?",
        "options": [
            "3000",
            "8080",
            "3030",
            "6060"
        ],
        "answer": "3000"
    },
    {
        "id": "07",
        "question": "How many numbers of elements a valid react component can return?",
        "options": [
            "1",
            "2",
            "3",
            "Unlimited"
        ],
        "answer": "1"
    },
    {
        "id": "08",
        "question": "What is the declarative way to render a dynamic list of components based on values in an array?",
        "options": [
            "Using the reduce array method",
            "Using the <Each /> component",
            "Using the Array.map() method",
            "With a for/while loop"
        ],
        "answer": "Using the Array.map() method"
    },
    {
        "id": "09",
        "question": "What is a state in React?",
        "options": [
            "A permanent storage.",
            "Internal storage of the component.",
            "External storage of the component.",
            "None of the above."
        ],
        "answer": "Internal storage of the component."
    },
    {
        "id": "10",
        "question": "What are the two ways to handle data in React?",
        "options": [
            "State & Props",
            "Services & Components",
            "State & Services",
            "State & Component"
        ],
        "answer": "State & Props"
    },
    {
        "id": "11",
        "question": "Which method in a React component should you override to stop the component from updating?",
        "options": [
            "componentDidMount",
            "shouldComponentUpdate",
            "componentWillUnmount",
            "componentDidUpdate"
        ],
        "answer": "shouldComponentUpdate"
    },
    {
        "id": "12",
        "question": "Which of the following keyword is used to create a class inheritance?",
        "options": [
            "create",
            "inherits",
            "this",
            "extends"
        ],
        "answer": "extends"
    },
    {
        "id": "13",
        "question": "What does the 'key' prop do in React?",
        "options": [
            "It helps identify which items have changed, are added, or are removed.",
            "It is used to pass the key event to the component.",
            "It is used to identify the component.",
            "None of the above."
        ],
        "answer": "It helps identify which items have changed, are added, or are removed."
    },
    {
        "id": "14",
        "question": "How can you access the state of a component from inside of a member function?",
        "options": [
            "this.getState()",
            "this.prototype.stateValue",
            "this.state",
            "this.values"
        ],
        "answer": "this.state"
    },
    {
        "id": "15",
        "question": "What is the correct syntax to pass a prop called 'name' with the value 'John' to a component?",
        "options": [
            "<Component name='John' />",
            "<Component name={John} />",
            "<Component name: John />",
            "<Component name-John />"
        ],
        "answer": "<Component name='John' />"
    },
    {
        "id": "16",
        "question": "What is the name of the tool used to take JSX and turn it into JavaScript?",
        "options": [
            "JSXCompiler",
            "JSXTransformer",
            "Babel",
            "JSXLint"
        ],
        "answer": "Babel"
    },
    {
        "id": "17",
        "question": "How do you handle an error in a React component?",
        "options": [
            "Using try-catch block",
            "Using error boundaries",
            "Using componentDidCatch",
            "All of the above"
        ],
        "answer": "All of the above"
    },
    {
        "id": "18",
        "question": "Which method is called after a component is rendered for the first time?",
        "options": [
            "componentDidUpdate",
            "componentWillUnmount",
            "componentDidMount",
            "componentWillMount"
        ],
        "answer": "componentDidMount"
    },
    {
        "id": "19",
        "question": "How do you bind the context of a function in React?",
        "options": [
            "Using the bind() method in the constructor",
            "Using the bind() method in the render method",
            "Using arrow functions",
            "Both A and C"
        ],
        "answer": "Both A and C"
    },
    {
        "id": "20",
        "question": "Which of the following is true about controlled components?",
        "options": [
            "They maintain their own state and update it based on user input.",
            "They do not maintain their own state.",
            "Their state is controlled by the DOM.",
            "None of the above."
        ],
        "answer": "They do not maintain their own state."
    },
    {
        "id": "21",
        "question": "What is a pure function in React?",
        "options": [
            "A function that returns the same output for the same input without side effects.",
            "A function that can mutate the state.",
            "A function that makes API calls.",
            "None of the above."
        ],
        "answer": "A function that returns the same output for the same input without side effects."
    },
    {
        "id": "22",
        "question": "What is the use of refs in React?",
        "options": [
            "To directly access the DOM element.",
            "To bind the function.",
            "To pass props to child components.",
            "None of the above."
        ],
        "answer": "To directly access the DOM element."
    },
    {
        "id": "23",
        "question": "Which hook is used to manage state in a functional component?",
        "options": [
            "useEffect",
            "useState",
            "useContext",
            "useReducer"
        ],
        "answer": "useState"
    },
    {
        "id": "24",
        "question": "What is the correct syntax for a React fragment?",
        "options": [
            "<></>",
            "<Fragment></Fragment>",
            "<div></div>",
            "<span></span>"
        ],
        "answer": "<></>"
    },
    {
        "id": "25",
        "question": "How do you pass a parameter to an event handler or callback in React?",
        "options": [
            "Using bind() method",
            "Using an arrow function",
            "Using bind() or an arrow function",
            "None of the above"
        ],
        "answer": "Using bind() or an arrow function"
    },
    {
        "id": "26",
        "question": "What is the purpose of using super() with props in React?",
        "options": [
            "To call the constructor of the parent class.",
            "To pass props to the parent class.",
            "To initialize the state.",
            "None of the above."
        ],
        "answer": "To call the constructor of the parent class."
    },
    {
        "id": "27",
        "question": "How can you force a React component to re-render?",
        "options": [
            "Using forceRender() method",
            "Using setState() method",
            "Using forceUpdate() method",
            "Using render() method"
        ],
        "answer": "Using forceUpdate() method"
    },
    {
        "id": "28",
        "question": "Which of the following methods in the React component lifecycle is called when a component is removed from the DOM?",
        "options": [
            "componentDidMount",
            "componentDidUpdate",
            "componentWillUnmount",
            "componentWillUpdate"
        ],
        "answer": "componentWillUnmount"
    },
    {
        "id": "29",
        "question": "What is the main purpose of the constructor in a React component?",
        "options": [
            "To initialize state and bind event handlers.",
            "To render the component.",
            "To update the DOM.",
            "To fetch data from an API."
        ],
        "answer": "To initialize state and bind event handlers."
    },
    {
        "id": "30",
        "question": "Which of the following is the correct way to handle forms in React?",
        "options": [
            "Using controlled components",
            "Using uncontrolled components",
            "Using both controlled and uncontrolled components",
            "None of the above"
        ],
        "answer": "Using both controlled and uncontrolled components"
    }
]
